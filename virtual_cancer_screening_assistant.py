# -*- coding: utf-8 -*-
"""Virtual Cancer Screening Assistant.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JEPoejHxV-m3sLE-jZGZQVbD2eRqmQ9T

Virtual Breast Cancer Predictive Model
"""

import numpy as np
import pandas as pd
import sklearn.datasets # Import datasets module from sklearn
from sklearn.model_selection import train_test_split # Import train test split function from sklearn
from sklearn.linear_model import LogisticRegression # Import logistic regression class
from sklearn.metrics import accuracy_score # import accuracy score function

"""Data Collection & Processing"""

# loading data from SK Learn
breast_cancer_dataset = sklearn.datasets.load_breast_cancer()

print(breast_cancer_dataset)

# Loading data to a data frame
data_frame = pd.DataFrame(breast_cancer_dataset.data, columns = breast_cancer_dataset.feature_names)

# print first 5 rows of data frame
data_frame.head()

# adding a target column to the current existing data frame
data_frame['label'] = breast_cancer_dataset.target

# This column contains series of 0s and 1s, where 0 indicates malignant and 1 being a benign
# cancer.

# printing the last 5 rows of the data frame
data_frame.tail()

# Printing the number of rows and columns in the dataset
data_frame.shape
# 569 different rows and 31 different columns
# 569 different patients

# Attaining information regarding data
data_frame.info()
# Null values are missing values to ensure the algorithm gets entirely trained

# checking for missing values
data_frame.isnull().sum()
# 0s indicate that there are no missing values in each of the columns

# statistical measures about the dataset
data_frame.describe()
# Count (no. of items), mean, standard deviation, minimum, 25% percentile less than
# 11.7, 50% percentile less than 13.37, 75% of the data is less than 15.78

# Checking the distribution of target variable
data_frame['label'].value_counts()
# 357 benign cases and 212 malignant cases
# Setting benign cases as 1 and malignant cases as 0

"""1 - Benign (Only stays at local point of origin).  0 - Malignant (Can spread to other parts of the body)"""

data_frame.groupby('label').mean()
# In case of malignant, all values are slightly larger than those of benign
# Higher overall mean values for malignant case
# Noticeable difference to assist Machine Learning model to differentiate if a person
# is suffering form a malignant or a benign tumor

"""Segregating Features and Target"""

X = data_frame.drop(columns = 'label', axis = 1)
# Taking data frame and dropping label column alone to get all features separately

Y = data_frame['label']

print(X)

print(Y)

"""Data Splitting into Training and Testing Data for the Model"""

# 4 arrays

# Test_size = 20% indicates 80% of data to be training data and 20% to be testing data
# Random_state = 2 way to split the data
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 2)
# X array is split into 2 parts: training and testing
# Corresponding labels in X_train are stored in Y_train
# Corresponding labels in X_test are stored in Y_test

print(X.shape, X_train.shape, X_test.shape)

"""Training Logistical Regression Model"""

# Useful for binary classifacation issues: Malignant and Benign
model = LogisticRegression()
# Loading an instance of logistic regression

# Training Logistical Regression model using 80% of data: training dataset
model.fit(X_train, Y_train)

"""Model Evaluation

Logistic Regression
"""

# accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(Y_train, X_train_prediction)

print('Accuracy on training data = ', training_data_accuracy) # Out of 100 cases, this model correctly predicts 95 cases

# accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(Y_test, X_test_prediction)

print('Accuracy on test data = ', test_data_accuracy) # 93% accurate on testing data
# Sometimes, model tries to learn more than training data

# Accuracy on

"""Building a Predictive Model"""

input_data = (13.54,14.36,87.46,566.3,0.09779,0.08129,0.06664,0.04781,0.1885,0.05766,0.2699,0.7886,2.058,23.56,0.008462,0.0146,0.02387,0.01315,0.0198,0.0023,15.11,19.26,99.7,711.2,0.144,0.1773,0.239,0.1288,0.2977,0.07259)

# change the input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data) # Tuple converted to a numpy array

# Reshape the numpy array as we are predicting for 1 data point
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1) # Reshapes in this particular shape

prediction = model.predict(input_data_reshaped)

print('The Model predicted ',prediction)
# Model correctly predicts this case as 0 is outputted... indicating malign case... but looking at the imported dataset, it is indeed a malignant case

if (prediction == 0):
  print('The Breast Cancer is Malignant')

else:
  print('The Breast Cancer is Benign')